## Resources

XSLT Reference:
- https://developer.mozilla.org/en-US/docs/Web/XSLT
- https://learn.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms256069(v=vs.100)
Example: https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/Basic_Example
: https://stackoverflow.com/a/9530410
: https://stackoverflow.com/questions/3387127/set-html5-doctype-with-xslt/10468906#10468906
: https://gist.github.com/fidothe/9da736aadee12629f5df
: https://github.com/doriantaylor/xslt-transclusion

## Single-file methods to consider

: Main file is an HTML file, XML is loaded with an iframe and ~~srcdoc~~
; Just use data URI to support older browsers
; Would ~~require JS on older browsers (https://github.com/jugglinmike/srcdoc-polyfill), but~~ make the file smaller and the logic leaner, and open fine from local storage on mobile (.XML doesn't)

: Main file is XML, the JS logic reconstructs the data from the HTML body the browser processed
; More complicated but should give better support on older browsers

### Notes

XML is not supported on some browsers. But we can load the XML code as broken HTML and it will be rendered well enough to execute scripts:
- Workaround works:
	- new 3DS: Content-Type must be [X]HTML

Anyways, we will need to either polyfill or/and transpile code to target older ECMAScript specs (ES3?), or directly write retrocompatible code:
: https://stackoverflow.com/questions/40205547/using-babel-to-transpile-to-es3-safari-compliant
: For converting syntax (e.g. let, const, arrow functions) tsc works:
:: tsc --allowJs true --target es3 --outFile Output.js Input.js
